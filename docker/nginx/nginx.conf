worker_processes 1;

user nobody nogroup;
pid /tmp/nginx.pid;
error_log /dev/stdout warn;

events {
  worker_connections 1024;
  accept_mutex off;
  use epoll;
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;

  log_format custom '$remote_addr request="$request" status=$status time=${request_time}s '
                    'request_size=$request_length response_size=$body_bytes_sent '
                    'host=$http_host';
  access_log /dev/stdout custom;
  sendfile on;
  proxy_max_temp_file_size 0;

  upstream app_server {
    server web:8000 fail_timeout=0;
  }

  server {
    listen 80 default_server;

    keepalive_timeout 5;

    location /status {
      stub_status on;
      access_log off;
    }

    location / {
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_http_version 1.1;
      proxy_set_header Connection "upgrade";
      proxy_redirect off;

      proxy_send_timeout 3;
      proxy_read_timeout 3;
      proxy_connect_timeout 3;

      proxy_pass http://app_server;
    }

    location /d/ws {
      proxy_set_header Host $http_host;
      proxy_set_header Upgrade $http_upgrade;
      proxy_http_version 1.1;
      proxy_set_header Connection "upgrade";
      proxy_redirect off;

      # 300 will mean websocket connections disconnect,
      # this is intentional, ws clients should be resilient enough to reconnect
      proxy_send_timeout 300;
      proxy_read_timeout 300;
      proxy_connect_timeout 3;

      proxy_pass http://app_server;
    }
  }
}
